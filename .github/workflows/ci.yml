name: ci
on:
  pull_request:
    branches:
      # Trigger on pull requests into main
      - main
    types: [ opened, synchronize ]

jobs:
  lint:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Run cargo clippy to pick up any errors
        run: cargo clippy --all-targets -- -Dwarnings
      - name: Check code is formatted
        run: cargo fmt -- --check

  build:
    name: Build package
    runs-on: ${{ matrix.build.os }}
    continue-on-error: ${{ matrix.build.experimental }}
    strategy:
      matrix:
        build:
          - os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            experimental: false
          - os: ubuntu-24.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            experimental: false
          - os: ubuntu-24.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
            experimental: true
          - os: ubuntu-24.04
            rust: stable
            target: x86_64-unknown-linux-musl
            experimental: false
          - os: ubuntu-24.04
            rust: beta
            target: x86_64-unknown-linux-gnu
            experimental: false
    steps:
      - uses: actions/checkout@v4
      - name: Install musl
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add x86_64-unknown-linux-musl
        if: ${{ matrix.build.target == 'x86_64-unknown-linux-musl' }}
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: ${{ matrix.build.rust }}
            target: ${{ matrix.build.target }}
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Run tests
        run: cargo test --all-features --target ${{ matrix.build.target }}
      - name: Build binary
        run: cargo build --release --target ${{ matrix.build.target }}
      - name: Build package
        run: cargo deb --target ${{ matrix.build.target }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.build.rust == 'stable' }}
        with:
          name: stableartifacts-${{ matrix.build.os }}-${{ matrix.build.target }}
          path: |
            target/${{matrix.build.target}}/release/blob
            target/${{matrix.build.target}}/debian/*.deb
